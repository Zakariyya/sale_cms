package org.slsale.controller.user;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.slsale.common.Constants;
import org.slsale.common.PageSupport;
import org.slsale.common.SQLTools;
import org.slsale.pojo.Role;
import org.slsale.pojo.User;
import org.slsale.service.role.RoleService;
import org.slsale.service.user.UserService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.mysql.jdbc.StringUtils;

@Controller
public class UserController extends BaseController {
	
	public Logger logger = Logger.getLogger(UserController.class);
	
	@Resource
	private UserService userService;
	
	@Resource 
	private RoleService roleService;
	
	@RequestMapping("/backend/modifyPwd.html")
	@ResponseBody
	public Object modifyPwd(@RequestParam String userJson){
		logger.debug("modifypwd==================>");
		System.out.println("------------------------------------------------------modifypwd");
		//获取当前用户
		User currentUser = this.getCurrentUser();
		
		if(userJson == null || userJson == ""){
			return "nodata"; //无数据处理
		}else{
			JSONObject userObject = JSONObject.fromObject(userJson);//前台js传来的user对象的json格式
			User user = (User) JSONObject.toBean(userObject, User.class);//转成user对象
			user.setId(currentUser.getId());
			user.setLoginCode(currentUser.getLoginCode());
			try {
				User loginUser = userService.getLoginUser(user);
				if(loginUser != null){
					//将新密码set到现有的user中
					/**
					 * 小细节：
					 * password2：是支付密码，但在这里前台用来储存“新的登录密码”
					 * 所以，password2的资源是被“污染”了的。
					 * ====================================
					 * 注意：user.setPassword2(null);
					 * 设置为null之后，在UserMapper.xml的modifyUser方法中
					 *-----------------------------
					 * 有<if test="password2 != null">password2= #{password2},</if>
					 *-----------------------------
					 * 因此，不会对password2进行任何数据操作
					 */
					user.setPassword(user.getPassword2());
					user.setPassword2(null);//因为设定值为null，并password2并不会被重写
					userService.modifyUser(user);
				}else{
					return "oldpasswrong";
				}
			} catch (Exception e) {
				// TODO: handle exception
				return "failed";
			}
		}
		return "success";
	}
	
	/**
	 * 用户管理：
	 * 		显示用户列表，并进行分页
	 * @param model
	 * @param session
	 * @param s_loginCode
	 * @param s_referCode
	 * @param s_roleId
	 * @param s_isStart
	 * @return
	 */
	@RequestMapping("/backend/userlist.html")
	public ModelAndView userList(Model model,HttpSession session,
			@RequestParam(value="currentPage", required=false) Integer currentPage,//当前页
			@RequestParam(value="s_loginCode",required=false) String s_loginCode,
			@RequestParam(value="s_referCode",required=false) String s_referCode,
			@RequestParam(value="s_roleId",required=false) String s_roleId,
			@RequestParam(value="s_isStart",required=false) String s_isStart){
		
		Map<String,Object>baseModel = (Map<String, Object>) session.getAttribute(Constants.SESSION_BASE_MODEL);
		if(baseModel == null){
			return new ModelAndView("redirect:/");
		}else{
			//获取roleList
			List<Role> roleList = null;
			try {
				roleList = roleService.getRoleList();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			
			//条件的模糊查询
			User user  = new User();
			if(null != s_loginCode){
				user.setLoginCode("%"+SQLTools.transfer(s_loginCode)+"%");
			}
			if(null != s_referCode){
				user.setReferCode("%"+SQLTools.transfer(s_referCode)+"%");
			}
//			if(!StringUtils.isNullOrEmpty(s_isStart)){//是否选择了"启用/未启用"   //很奇怪，老是报错
			if(s_isStart != null && s_isStart != "")      //所以改成这个
				user.setIsStart(Integer.valueOf(s_isStart));
			else
				user.setIsStart(null);
//			if(!StringUtils.isNullOrEmpty(s_roleId)){//是否"角色"  		//很奇怪，老是报错
			if(s_isStart != null && s_isStart != "")      //所以改成这个
				user.setIsStart(Integer.valueOf(s_roleId));
			else
				user.setRoleId(null);
			
			//page分页列表
			PageSupport pageSupport = new PageSupport();
			try {
				pageSupport.setTotalCount(userService.count(user));
				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				logger.debug(">>>>>>>>>>>>>>>页面异常");
				pageSupport.setTotalCount(0);
			}
			if(pageSupport.getTotalCount() > 0){
				if(currentPage != null){//当前页不为空时
					pageSupport.setPage(currentPage);
				}
				if(currentPage <= 0){//当前页小于，则设定跳转至首页
					pageSupport.setPage(1);
				}
				if(currentPage > pageSupport.getPageCount()){//当前页大于总页数，则设定跳转到尾页
					pageSupport.setPage(pageSupport.getPageCount());
				}
				
				//MySQL--分页查询，limit ?, ?  (第一个参数下标从0开始)
				user.setStartNum((pageSupport.getPage()-1)*pageSupport.getPageSize());//下标
				user.setPageSize(pageSupport.getPageSize());//每个页面显示的条数
				List<User> userList = null;
				try {
					userService.getUserList(user);
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
					userList = null;
					if(pageSupport == null){
						pageSupport = new PageSupport();
						pageSupport.setItems(null);//设定当前页面集合为空，相当于置空页面内容
					}
				}
				pageSupport.setItems(userList);
			}else{
				pageSupport.setItems(null);
			}
			
			model.addAttribute("page",pageSupport);
			model.addAttribute("roleList",roleList);
			model.addAllAttributes(baseModel);
			model.addAttribute("s_loginCode", s_loginCode);
			model.addAttribute("s_referCode", s_referCode);
			model.addAttribute("s_roleId", s_roleId);
			model.addAttribute("s_isStart", s_isStart);
			return new ModelAndView("/backend/userlist");
		}
	}
	
	
	
	
	
	
	
	
	
	
}















