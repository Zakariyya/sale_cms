package org.slsale.controller.user;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.slsale.common.Constants;
import org.slsale.common.PageSupport;
import org.slsale.common.SQLTools;
import org.slsale.pojo.Role;
import org.slsale.pojo.User;
import org.slsale.service.role.RoleService;
import org.slsale.service.user.UserService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.mysql.jdbc.StringUtils;
//@Controller
public class UserControllerNo11 extends BaseController {
	private Logger logger = Logger.getLogger(UserControllerNo11.class);
	
	@Resource
	private UserService userService;
	
	@Resource
	private RoleService roleService;
	
	@RequestMapping("/backend/modifyPwd.html")
	@ResponseBody
	public Object modifyPwd(@RequestParam String userJson){
		logger.debug("modifyPwd ================ ");
		User sessionUser = this.getCurrentUser();
		if(userJson == null || userJson.equals("")){
			return "nodata";
		}else{
			JSONObject userObject = JSONObject.fromObject(userJson);
			User user = (User)JSONObject.toBean(userObject,User.class);
			user.setId(sessionUser.getId());
			user.setLoginCode(sessionUser.getLoginCode());
			try {
				if(userService.getLoginUser(user)!=null){
					user.setPassword(user.getPassword2());
					user.setPassword2(null);
					userService.modifyUser(user);
				}else{
					return "oldpwdwrong";
				}
			} catch (Exception e) {
				// TODO: handle exception
				return "failed";
			}
		}
		return "success";
	}
	
	/**
	 * 获取用户列表（分页查询）
	 * @return
	 */
	@RequestMapping("/backend/userlist.html")
	public ModelAndView userList(HttpSession session,Model model,
								@RequestParam(value="currentpage",required=false)Integer currentpage ,
								@RequestParam(value="s_referCode",required=false) String s_referCode,
								@RequestParam(value="s_loginCode",required=false) String s_loginCode,
								@RequestParam(value="s_roleId",required=false) String s_roleId,
								@RequestParam(value="s_isStart",required=false) String s_isStart){
		
		Map<String, Object> baseModel = (Map<String, Object>)session.getAttribute(Constants.SESSION_BASE_MODEL);
		if(baseModel == null){
			return new ModelAndView("redirect:/");
		}else{
			//获取roleList
			List<Role> roleList = null;
			try {
				roleList = roleService.getRoleList();
			} catch (Exception e) {
				// TODO: handle exception
			}
			//设置查询条件-放入user对象中
			User user = new User();
			if(null != s_loginCode)
				user.setLoginCode("%"+SQLTools.transfer(s_loginCode)+"%");
			if(null != s_referCode)
				user.setReferCode("%"+SQLTools.transfer(s_referCode)+"%");
//			if(!StringUtils.isNullOrEmpty(s_roleId))   //很奇怪，老是报错
			if(s_isStart != null && s_isStart != "")
				user.setIsStart(Integer.valueOf(s_isStart));
			else 
				user.setIsStart(null);
//			if(!StringUtils.isNullOrEmpty(s_roleId))   //很奇怪，老是报错
			if(s_roleId != null && s_roleId != "")
				user.setRoleId(Integer.valueOf(s_roleId));
			else
				user.setRoleId(null);
			logger.debug("currentpage====================== " + currentpage);
			//pages 
			PageSupport page = new PageSupport();
			try {
				logger.debug("userService.count(user)====================== " + userService.count(user));
				page.setTotalCount(userService.count(user));
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
				page.setTotalCount(0);
			}
			logger.debug("page.getTotalCount()====================== " + page.getTotalCount());
			if(page.getTotalCount() > 0){
				if(currentpage != null)
					page.setPage(currentpage);
				if(page.getPage() <= 0)
					page.setPage(1);
				if(page.getPage() > page.getPageCount())
					page.setPage(page.getPageCount());
				user.setStartNum((page.getPage() - 1) * page.getPageSize());
				user.setPageSize(page.getPageSize());
				
				logger.debug("user.getPageSize()====================== " + user.getPageSize());
				logger.debug("user.getStarNum()====================== " + user.getStartNum());
				List<User> userList = null;
				try {
					userList = userService.getUserList(user);
				}catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
					userList = null;
					if(page == null){
						page = new PageSupport();
						page.setItems(null);
					}
				}
				logger.debug("userList====================== " + userList.size());
				page.setItems(userList);
			}else{
				page.setItems(null);
			}
			model.addAllAttributes(baseModel);
			model.addAttribute("page", page);
			model.addAttribute("roleList",roleList);
			model.addAttribute("s_loginCode", s_loginCode);
			model.addAttribute("s_referCode", s_referCode);
			model.addAttribute("s_isStart", s_isStart);
			model.addAttribute("s_roleId", s_roleId);
			return new ModelAndView("/backend/userlist");
		}
	}
	
	
	
}
